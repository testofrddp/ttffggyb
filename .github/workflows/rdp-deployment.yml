name: RDP Server Deployment (Production)

on:
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Force run even if another instance is running'
        required: false
        default: 'false'

jobs:
  deploy-rdp:
    runs-on: windows-latest
    timeout-minutes: 90
    permissions:
      contents: write  # Required to push connection details back to repository

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: System Information and Prerequisites
      run: |
        echo "=== SYSTEM INFORMATION ==="
        echo "OS: $env:OS"
        echo "Processor: $env:PROCESSOR_ARCHITECTURE"
        echo "User: $env:USERNAME"
        echo "PowerShell Version: $($PSVersionTable.PSVersion)"
        echo "Current Time: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')"
        echo "=============================="

        # Check SSH availability
        try {
          $sshVersion = ssh -V 2>&1
          echo "SSH Version: $sshVersion"
        } catch {
          echo "WARNING: SSH not found, attempting to install OpenSSH..."
          try {
            Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0
            echo "âœ“ OpenSSH Client installed"
          } catch {
            echo "âœ— Failed to install OpenSSH: $_"
            exit 1
          }
        }

    - name: Enhanced RDP Configuration
      run: |
        echo "=== RDP CONFIGURATION ==="
        echo "Configuring Windows Remote Desktop with enhanced security..."

        try {
          # Enable Remote Desktop
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
          echo "âœ“ Remote Desktop enabled"

          # Configure firewall rules
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          echo "âœ“ Firewall rules configured"

          # Disable Network Level Authentication (can cause issues with tunneled connections)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 0
          echo "âœ“ Network Level Authentication disabled for better tunnel compatibility"

          # Set security layer to RDP Security Layer
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "SecurityLayer" -Value 0
          echo "âœ“ Security layer set to RDP"

          # Set encryption level to low for better compatibility
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "MinEncryptionLevel" -Value 1
          echo "âœ“ Encryption level set for compatibility"

          # Configure user account
          $username = "runneradmin"
          $password = "P@ssw0rd!"
          Set-LocalUser -Name $username -Password (ConvertTo-SecureString -AsPlainText $password -Force)
          echo "âœ“ User credentials configured"

          # Restart RDP service to apply configuration changes
          echo "Restarting RDP service to apply configuration..."
          Restart-Service -Name "TermService" -Force
          Start-Sleep -Seconds 3

          # Verify RDP service
          $rdpService = Get-Service -Name "TermService"
          if ($rdpService.Status -eq "Running") {
            echo "âœ“ RDP service restarted and running"
          } else {
            echo "âš  RDP service not running, attempting to start..."
            Start-Service -Name "TermService"
            Start-Sleep -Seconds 2
            $rdpService = Get-Service -Name "TermService"
            if ($rdpService.Status -eq "Running") {
              echo "âœ“ RDP service started successfully"
            } else {
              echo "âœ— Failed to start RDP service"
            }
          }

          # Check if RDP port is listening
          Start-Sleep -Seconds 2  # Give service time to bind to port
          $rdpPort = Get-NetTCPConnection -LocalPort 3389 -ErrorAction SilentlyContinue
          if ($rdpPort) {
            echo "âœ“ RDP port 3389 is listening"
            echo "  Listening on: $($rdpPort.LocalAddress):$($rdpPort.LocalPort)"
          } else {
            echo "âš  RDP port 3389 not detected"
            echo "Checking all listening ports..."
            Get-NetTCPConnection -State Listen | Where-Object {$_.LocalPort -eq 3389} | ForEach-Object {
              echo "  Found RDP port: $($_.LocalAddress):$($_.LocalPort)"
            }
          }

          # Additional diagnostics
          echo "=== RDP DIAGNOSTICS ==="
          echo "Current RDP configuration:"
          $rdpConfig = Get-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp'
          echo "  UserAuthentication: $($rdpConfig.UserAuthentication)"
          echo "  SecurityLayer: $($rdpConfig.SecurityLayer)"
          echo "  MinEncryptionLevel: $($rdpConfig.MinEncryptionLevel)"

          $tsConfig = Get-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server'
          echo "  fDenyTSConnections: $($tsConfig.fDenyTSConnections)"

          echo "=== RDP CONFIGURATION COMPLETE ==="

        } catch {
          echo "âœ— RDP configuration failed: $_"
          echo "This may cause connection issues"
        }

    - name: Create Serveo Tunnel
      run: |
        echo "=== SERVEO TUNNEL SETUP ==="
        echo "Starting Serveo tunnel for RDP access..."
        echo "Subdomain: auto-generated"

        # Start SSH tunnel to Serveo
        $sshArgs = @(
          "-o", "StrictHostKeyChecking=no",
          "-o", "UserKnownHostsFile=/dev/null",
          "-o", "ServerAliveInterval=30",
          "-o", "ServerAliveCountMax=3",
          "-o", "ConnectTimeout=15",
          "-o", "BatchMode=yes",
          "-T",
          "-R", "0:localhost:3389",
          "serveo.net"
        )

        Write-Host "SSH Command: ssh $($sshArgs -join ' ')" -ForegroundColor Cyan

        try {
          # Start SSH process
          $psi = New-Object System.Diagnostics.ProcessStartInfo
          $psi.FileName = "ssh"
          $psi.Arguments = $sshArgs -join " "
          $psi.UseShellExecute = $false
          $psi.RedirectStandardOutput = $true
          $psi.RedirectStandardError = $true
          $psi.CreateNoWindow = $true

          $process = [System.Diagnostics.Process]::Start($psi)

          if (-not $process) {
            throw "Failed to start SSH process"
          }

          Write-Host "âœ“ SSH process started (PID: $($process.Id))" -ForegroundColor Green

          # Monitor output for tunnel URL
          $tunnelUrl = $null
          $timeout = 45
          $startTime = Get-Date

          while ((Get-Date) -lt $startTime.AddSeconds($timeout) -and -not $tunnelUrl) {
            if (-not $process.HasExited) {
              $output = $process.StandardOutput.ReadLine()
              if ($output) {
                Write-Host "SSH: $output" -ForegroundColor Gray

                # Look for tunnel URL
                if ($output -match "Forwarding TCP connections from ([^\s\r\n]+)") {
                  $tunnelUrl = "tcp://$($matches[1])"
                  Write-Host "âœ“ Tunnel URL found: $tunnelUrl" -ForegroundColor Green
                  break
                }
              }
            } else {
              Write-Host "âš  SSH process exited unexpectedly" -ForegroundColor Yellow
              break
            }
            Start-Sleep -Seconds 1
          }

          if ($tunnelUrl) {
            # Save connection details
            $connectionDetails = @{
              tunnelUrl = $tunnelUrl
              provider = "serveo"
              username = "runneradmin"
              password = "P@ssw0rd!"
              timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC"
            }

            $connectionDetails | ConvertTo-Json | Out-File -FilePath "connection-details.json" -Encoding UTF8
            Write-Host "âœ“ Connection details saved to connection-details.json" -ForegroundColor Green

            # Display connection information
            Write-Host "ðŸŽ‰ SERVEO TUNNEL ACTIVE!" -ForegroundColor Green
            Write-Host "Tunnel URL: $tunnelUrl" -ForegroundColor Cyan
            Write-Host "Username: runneradmin" -ForegroundColor Cyan
            Write-Host "Password: P@ssw0rd!" -ForegroundColor Cyan
          } else {
            throw "Failed to establish tunnel within timeout period"
          }

        } catch {
          Write-Host "âœ— Serveo tunnel failed: $_" -ForegroundColor Red
          
          Write-Host "Attempting failover to alternative providers..." -ForegroundColor Yellow

          # Try Serveo as fallback
          Write-Host "Trying Serveo as fallback..." -ForegroundColor Yellow
          try {
            $serveoArgs = @("-o", "StrictHostKeyChecking=no", "-o", "UserKnownHostsFile=/dev/null", "-T", "-R", "0:localhost:3389", "serveo.net")
            $serveoProcess = Start-Process -FilePath "ssh" -ArgumentList $serveoArgs -PassThru -NoNewWindow -RedirectStandardOutput "serveo-output.txt"

            Start-Sleep -Seconds 15

            $serveoOutput = Get-Content "serveo-output.txt" -Raw
            if ($serveoOutput -match "Forwarding TCP connections from ([^\s\r\n]+)") {
              $fallbackUrl = "tcp://$($matches[1])"
              Write-Host "âœ“ Serveo fallback successful: $fallbackUrl" -ForegroundColor Green

              $connectionDetails = @{
                tunnelUrl = $fallbackUrl
                provider = "serveo-fallback"
                username = "runneradmin"
                password = "P@ssw0rd!"
                timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC"
              }

              $connectionDetails | ConvertTo-Json | Out-File -FilePath "connection-details.json" -Encoding UTF8
              exit 0
            }
          } catch {
            Write-Host "âœ— Serveo fallback failed: $_" -ForegroundColor Red
          }

          Write-Host "âœ— All tunnel providers failed" -ForegroundColor Red
          exit 1
        }
    - name: Keep RDP Server Active
      run: |
        echo "=== RDP SERVER ACTIVE ==="
        echo "RDP server is now running and accessible"
        echo "Session will remain active for the duration of this workflow"
        echo "Maximum session time: 90 minutes (GitHub Actions limit)"
        echo ""
        echo "Connection established at: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')"
        echo "Estimated session end: $(Get-Date -Date (Get-Date).AddMinutes(85) -Format 'yyyy-MM-dd HH:mm:ss UTC')"
        echo ""
        echo "Keeping session alive..."

        # Keep alive with periodic status updates
        $startTime = Get-Date
        $maxDuration = 85 * 60  # 85 minutes in seconds
        $updateInterval = 300   # 5 minutes

        while ((Get-Date) -lt $startTime.AddSeconds($maxDuration)) {
          Start-Sleep -Seconds $updateInterval
          $elapsed = [math]::Round(((Get-Date) - $startTime).TotalMinutes, 1)
          $remaining = [math]::Round(85 - $elapsed, 1)
          echo "Session active for $elapsed minutes, $remaining minutes remaining"

          # Verify RDP service is still running
          $rdpService = Get-Service -Name "TermService" -ErrorAction SilentlyContinue
          if ($rdpService -and $rdpService.Status -eq "Running") {
            echo "âœ“ RDP service healthy"
          } else {
            echo "âš  RDP service issue detected"
          }
        }

        echo "Session time limit reached, workflow ending"